<?php

/**
 * @file
 * Synchronize files with an Amazon S3 bucket across multiple regions.
 */

use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_file_url_alter().
 */
function amazon_s3_sync_file_url_alter(&$uri) {
  $config = \Drupal::Config('amazon_s3_sync.config');

  if ($config->get('rewrite_url')) {

    // Rewrite the URI with the Virtual Hosting defined Common name.
    if (preg_match('/^public:\/\/(.*)$/', $uri, $matches)) {
      $path = $matches[1];

      $excludes = $config->get('s3cmd_excludes');
      foreach ($excludes as $value) {
        if (fnmatch($value, $path)) {
          return;
        }
      }

      $protocol = ($config->get('enable_ssl')) ? 'https' : 'http';

      $uri = $protocol . '://' . $config->get('endpoint') . '/' . $path;
    }
  }
}

/**
 * Implements hook_file_update().
 */
function amazon_s3_sync_file_update(Drupal\Core\Entity\EntityInterface $entity) {
  $config = \Drupal::Config('amazon_s3_sync.config');

  if ($config->get('rewrite_url')) {
    amazon_s3_sync_content($entity);
  }
}

/**
 * Sync content, including derivatives normally generated on the first request.
 *
 * This is workaround for how Drupal handles CRUD file operations in cases
 * where the CDN source must be immediately available (images) and will be
 * accessed using a non-view approach (ex: REST export/AJAX)
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity object.
 *
 * @return bool
 *   TRUE if success, FALSE if not.
 */
function amazon_s3_sync_content(Drupal\Core\Entity\EntityInterface $entity) {
  $file_uri = $entity->getFileUri();

  $image_factory = \Drupal::service('image.factory');
  $image = $image_factory->get($file_uri);

  if (!$image->isValid()) {
    return amazon_s3_sync_file($file_uri);
  }

  $styles = ImageStyle::loadMultiple();
  foreach ($styles as $style) {
    $derivative_uri = $style->buildUri($file_uri);

    $deleted = FALSE;

    if ($entity->isNewRevision() || !file_exists($derivative_uri)) {

      // Create the image derivative.
      $style->createDerivative($file_uri, $derivative_uri);
    }
    elseif ($entity->isTemporary()) {

      // Delete the image derivative.
      $style->flush($file_uri);

      $deleted = TRUE;
    }

    if (!amazon_s3_sync_file($derivative_uri, $deleted)) {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Synchronize file(s) with the Amazon S3 bucket(s).
 *
 * @param string $uri
 *   Drupal public: file path.
 * @param bool $delete
 *   Delete the file.
 *
 * @return bool
 *   TRUE if success, FALSE if not.
 */
function amazon_s3_sync_file($uri, $delete = FALSE) {
  $config = \Drupal::Config('amazon_s3_sync.config');

  // Get local source and target path.
  $source = \Drupal::service('file_system')->realpath($uri);
  $target = file_uri_target($uri);

  // Prepare S3cmd client request.
  $s3cmd = \Drupal::service('amazon_s3_sync.s3cmd');
  $s3cmd->dry_run = $config->get('dry_run');
  $s3cmd->debug   = $config->get('debug');
  $s3cmd->verbose = $config->get('verbose');

  if ($delete) {
    return $s3cmd->delete($target);
  }
  else {
    return $s3cmd->sync($source, $target);
  }
}
